{"version":3,"sources":["assets/bontrip.svg","components/Header/Header.tsx","components/Slideshow/Slideshow.tsx","helpers/ElementHelpers.ts","helpers/Animations.ts","helpers/Addresses.ts","models/City.ts","services/CityService.ts","components/CityAutocomplete/CityAutocomplete.tsx","redux/cities/cities.actions.ts","redux/cities/cities.reducers.ts","redux/user/user.actions.ts","redux/user/user.reducers.ts","redux/directions/directions.actions.ts","redux/directions/directions.reducers.ts","redux/GlobalStore.ts","redux/localStorage.ts","redux/cities/cities.selectors.ts","redux/user/user.selectors.ts","services/DirectionsService.ts","redux/directions/directions.selectors.ts","redux/cities/cities.thunks.ts","helpers/Navigation.ts","containers/Home/Home.tsx","components/Map/Map.tsx","components/Sidepanel/Sidepanel.tsx","components/CityDraggableCard/CityDraggableCard.I.ts","components/CityDraggableCard/CityDraggableCard.tsx","components/CityDraggableCardsList/CityDraggableCardsList.tsx","components/CityDatesForm/CityDatesForm.tsx","containers/AddCities/AddCities.tsx","services/AuthService.ts","containers/Register/Register.tsx","index.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","_ref3","id","stroke","strokeWidth","fill","fillRule","fontFamily","fontSize","fontWeight","className","x","y","_ref","svgRef","title","props","width","height","viewBox","ref","ForwardRef","forwardRef","Header","isTransparent","href","properties","duration","transitionDuration","infinite","indicators","arrows","pauseOnHover","Slideshow","images","map","image","style","backgroundImage","ElementHelpers","element","tagName","toLowerCase","Animations","wordsArray","defaultPlaceholder","index","addListener","isInput","isAnimationPaused","dataset","currentIndex","placeholderValue","pauseAnimation","value","e","typingAnimationPaused","addEventListener","setAttribute","setTimeout","typing","animationTimeout","Addresses","address_component","types","long_name","randomColor","require","City","data","name","endDate","startDate","coordinates","color","distance","v4","luminosity","hue","lat","lng","cityObject","city","address_components","forEach","component","isComponentValid","componentType","getComponentType","geometry","location","CityService","longitude","latitude","Promise","resolve","reject","axios","get","process","then","response","features","status","cities","matching_place_name","place_name","catch","error","console","log","searchText","push","isCancel","message","CityAutocomplete","animatedPlaceholderWords","placeholder","onSelect","useState","setValue","suggestions","setSuggestions","useEffect","updateSuggestions","byName","data-cy","autosuggest","input","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","onSuggestionSelected","inputProps","onChange","inputData","newValue","citiesActions","add","createAction","remove","updateOne","citiesReducer","createReducer","type","state","action","payload","normalize","cityId","update","userActions","setActiveCity","userReducer","activeCityId","activeTripId","directionsActions","directionsReducer","directions","directionsId","rootReducer","combineReducers","user","defaultMiddleWares","getDefaultMiddleware","serializableCheck","ignoredActions","middleware","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","GlobalStore","configureStore","reducer","preloadedState","subscribe","stringify","setItem","saveState","getState","getCities","createSelector","sort","a","b","moment","isBefore","getActiveCity","getCoordinatesArray","find","getCityColors","createGetCities","DirectionsService","points","method","parsedPointString","getParsedPointString","point","concat","toString","substring","getDirections","routes","createGetDirections","updateDirections","dispatch","savedCities","cityIndex","findIndex","savedCity","previousCityCoordinates","toFixed","format","citiesThunks","isCityAlreadyAdded","lastCity","Date","setDate","getDate","formattedCity","generateColor","savedCitiesBefore","savedCitiesAfter","Navigation","browserHistory","injectIntl","intl","messages","placeholders","city_autocomplete","city_array","isFullscreen","home","event","goTo","Map","ReactMapboxGl","accessToken","MapWrapper","markersData","containerStyle","onClick","lngLat","byCoordinates","setMarker","center","directionsInfo","tileJsonSource","sourceId","paint","layout","markerInfo","alert","anchor","offset","src","preProcessor","code","replace","position","Sidepanel","orientation","children","isOpen","togglePanel","panelClasses","classNames","backgroundColor","top","ItemTypes","CityDraggableCard","React","text","subtitle","indicatorColor","footerText","isDragging","connectDragSource","connectDropTarget","onRemove","elementRef","useRef","opacity","useImperativeHandle","getNode","current","DropTarget","hover","monitor","node","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","hoverClientY","getClientOffset","moveCard","connect","dropTarget","DragSource","beginDrag","dragSource","CityDraggableCardsList","cards","clickCard","removeCard","card","diff","class","today","CityDatesForm","ranges","setRanges","activeRange","setActiveRange","colors","createCityDateRanges","currentActiveCityIndex","getCurrentActiveCityIndex","rangeColors","focusedRange","initialFocusedRange","range","getRange","values","handleRangeChange","scroll","enabled","direction","months","moveRangeOnFirstSelection","onRangeFocusChange","nextActiveCity","selectedCities","activeCity","cityColors","cityDatesFormTitle","forms","city_dates_form_title","initialLocation","hasNavigation","isLoaded","AuthService","post","REACT_API_URL","Register","pages","signup","email","password","confirm_password","setUser","updateForm","inputName","contact","register","submit","messages_es","messages_en","language","navigator","split","App","locale","defaultLocale","DndProvider","backend","HTML5Backend","store","history","path","Home","AddCities","root","document","getElementById","render"],"mappings":"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","file":"static/js/main.31525825.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null);\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Page-1\",\n  stroke: \"none\",\n  strokeWidth: 1,\n  fill: \"none\",\n  fillRule: \"evenodd\",\n  fontFamily: \"Futura-Medium, Futura\",\n  fontSize: 48,\n  fontWeight: 400\n}, /*#__PURE__*/React.createElement(\"text\", {\n  id: \"bontrip\",\n  className: \"bontrip-logo\",\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"tspan\", {\n  x: -3,\n  y: 40\n}, \"bontrip\")));\n\nvar SvgBontrip = function SvgBontrip(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"151px\",\n    height: \"53px\",\n    viewBox: \"0 0 151 53\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgBontrip, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/bontrip.1a5a994b.svg\";\nexport { ForwardRef as ReactComponent };","import * as React from 'react';\nimport { ReactComponent as BontripLogo } from '../../assets/bontrip.svg';\nimport { IHeaderProps } from './Header.I';\n\nexport const Header: React.FC<IHeaderProps> = (props) => {\n    const { isTransparent } = props;\n\n    return (\n        <div className={`header ${isTransparent ? 'is-transparent' : ''}`}>\n            <a className=\"logo\" href=\"/\">\n                <BontripLogo />\n            </a>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { Fade } from 'react-slideshow-image';\nimport { ISlideshowProps } from './Slideshow.I';\n\nconst properties = {\n    duration: 5000,\n    transitionDuration: 1000,\n    infinite: true,\n    indicators: false,\n    arrows: false,\n    pauseOnHover: true,\n};\n\nexport const Slideshow: React.FC<ISlideshowProps> = (props) => {\n    const { images } = props;\n\n    return (\n        <Fade {...properties}>\n            {images.map((image, i) => (\n                <div className=\"slideshow__item\" key={i} style={{ backgroundImage: `url(${image})` }}></div>\n            ))}\n        </Fade>\n    );\n};\n","export class ElementHelpers {\n    public static isInput(element: HTMLElement): boolean {\n        return element.tagName.toLowerCase() === 'input';\n    }\n}\n","import { ElementHelpers } from './ElementHelpers';\nimport { FormEvent } from 'react';\n\ninterface ITypingAnimationData {\n    element: HTMLElement;\n    wordsArray: string[];\n    defaultPlaceholder: string;\n    index?: number;\n    addListener?: boolean;\n}\n\nexport class Animations {\n    private static animationTimeout = 2000;\n\n    /**\n     * Typing animation on an input, called recursively to type in a list of words letter by letter in an input\n     * @param element                 The element to animate\n     * @param wordsArray              Words to type\n     * @param defaultPlaceholder      Placeholder text before animation\n     * @param index                   The current index of the wordsArray\n     */\n    public static typing({ element, wordsArray, defaultPlaceholder, index = 0, addListener = true }: ITypingAnimationData): void {\n        if (!element || !ElementHelpers.isInput(element)) {\n            return;\n        }\n\n        const isAnimationPaused: boolean = element && element.dataset['typingAnimationPaused'] === 'true';\n        const currentIndex: number = index ? index : 0;\n        const placeholderValue: string = isAnimationPaused && currentIndex <= wordsArray.length - 1 ?\n            defaultPlaceholder :\n            wordsArray && wordsArray[currentIndex] ? wordsArray[currentIndex] : '';\n        const pauseAnimation = (value: any, e: FocusEvent): void => {\n            return ((e.target as HTMLElement).dataset.typingAnimationPaused = value);\n        };\n\n        if (addListener) {\n            element.addEventListener('focusin', (e) => pauseAnimation('true', e));\n            element.addEventListener('focusout', (e) => pauseAnimation('false', e));\n        }\n\n        element.setAttribute('placeholder', placeholderValue);\n\n        if (!isAnimationPaused) {\n            setTimeout(\n                () =>\n                    Animations.typing({\n                        element: element,\n                        wordsArray: wordsArray,\n                        defaultPlaceholder: defaultPlaceholder,\n                        index: currentIndex === wordsArray.length - 1 ? 0 : currentIndex + 1,\n                        addListener: false,\n                    }),\n                this.animationTimeout,\n            );\n        }\n    }\n}\n","export class Addresses {\n    public static getComponentType(address_component: any) {\n        switch (address_component.types[0]) {\n            case 'locality':\n            case 'administrative_area_level_3':\n                return 'name';\n            case 'country':\n                return 'country';\n            case 'administrative_area_level_1':\n                return 'state';\n        }\n    }\n\n    public static isComponentValid(address_component: any) {\n        return address_component.long_name.length > 0;\n    }\n}\n","import { Addresses } from '../helpers/Addresses';\nimport { v4 } from 'uuid';\n\nconst randomColor = require('randomcolor');\n\nexport interface ICityCoordinates {\n    lng: number;\n    lat: number;\n}\n\nexport class City {\n    public name: string;\n    public endDate: string;\n    public startDate: string;\n    public id: string;\n    public coordinates: ICityCoordinates;\n    public color: string;\n    public distance: string;\n    public duration: string;\n\n    constructor(data?: any) {\n        this.name = (data || {}).name || '';\n        this.startDate = (data || {}).startDate || null;\n        this.endDate = (data || {}).endDate || null;\n        this.id = (data || {}).id || v4();\n        this.coordinates = { ...(data || {}).coordinates } || {};\n        this.color = (data || {}).color || null;\n        this.distance = (data || {}).distance || null;\n        this.duration = (data || {}).duration || null;\n    }\n\n    public generateColor(index: number): void {\n        if (!this.color) {\n            if (index % 2) {\n                this.color = randomColor({\n                    luminosity: 'bright',\n                    hue: 'red',\n                });\n            } else if (index % 3) {\n                this.color = randomColor({\n                    luminosity: 'bright',\n                    hue: 'orange',\n                });\n            } else {\n                this.color = randomColor({\n                    luminosity: 'bright',\n                    hue: 'blue',\n                });\n            }\n        }\n    }\n\n    public getCoordinatesArray() {\n        return [this.coordinates.lat, this.coordinates.lng];\n    }\n\n    public normalize() {\n        return {\n            id: this.id,\n            color: this.color,\n            startDate: this.startDate,\n            endDate: this.endDate,\n            name: this.name,\n            coordinates: this.coordinates,\n            distance: this.distance,\n            duration: this.duration,\n        };\n    }\n\n    public parseCityObject(cityObject: any) {\n        const city: any = new City();\n        const address_components = cityObject.address_components;\n\n        address_components.forEach(function (component: any) {\n            if (Addresses.isComponentValid(component)) {\n                const componentType: any = Addresses.getComponentType(component);\n                city[componentType] = component.long_name;\n            }\n        });\n\n        city.coordinates = cityObject.geometry.location;\n\n        return city;\n    }\n}\n","import { City } from '../models/City';\nimport axios from 'axios';\nimport Promise from 'promise';\n\nexport class CityService {\n    public static byCoordinates(longitude: number, latitude: number): Promise<City> {\n        return new Promise((resolve, reject) => {\n            axios\n                .get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=place&access_token=${process.env.REACT_APP_BONTRIP_MAP_KEY}`)\n                .then(function (response) {\n                    if (response.data && response.data.features && response.status === 200) {\n                        const cities = response.data.features.map((city: any) => ({\n                            name: city.matching_place_name ? city.matching_place_name : city.place_name,\n                            coordinates: {\n                                lat: city.geometry.coordinates[0],\n                                lng: city.geometry.coordinates[1],\n                            },\n                        }));\n\n                        resolve(cities[0]);\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error in catch');\n                    reject(error);\n                });\n        });\n    }\n\n    public static byName(searchText: string) {\n        return new Promise((resolve, reject) => {\n            if (searchText) {\n                axios\n                    .get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${searchText}.json?types=place&access_token=${process.env.REACT_APP_BONTRIP_MAP_KEY}`)\n                    .then(function (response) {\n                        const cities: City[] = [];\n\n                        response.data.features.map((city: any) => {\n                            cities.push(\n                                new City({\n                                    name: city.matching_place_name || city.place_name,\n                                    coordinates: {\n                                        lat: city.geometry.coordinates[0],\n                                        lng: city.geometry.coordinates[1],\n                                    },\n                                }),\n                            );\n                        });\n\n                        resolve(cities);\n                    })\n                    .catch(function (error) {\n                        if (axios.isCancel(error)) {\n                            console.log('Request canceled', error.message);\n                        } else {\n                            reject(error);\n                        }\n                    });\n            }\n        });\n    }\n}\n","import * as React from 'react';\nimport { Animations } from '../../helpers/Animations';\nimport Autosuggest from 'react-autosuggest';\nimport { City } from '../../models/City';\nimport { ICityAutocompleteProps } from './CityAutocomplete.I';\nimport { CityService } from '../../services/CityService';\nimport { useEffect, useState } from 'react';\n\nexport const CityAutocomplete: React.FC<ICityAutocompleteProps> = (props) => {\n    const { animatedPlaceholderWords, placeholder, onSelect } = props;\n    const [value, setValue] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n\n    useEffect(() => {\n        updateSuggestions();\n    }, [value]);\n\n    const renderSuggestion = (suggestion: City) => (\n        <ul className=\"autocomplete-results\">\n            <li className=\"autocomplete-results-item\">{suggestion.name}</li>\n        </ul>\n    );\n\n    const updateSuggestions = (): void => {\n        if (value && value.length > 0) {\n            CityService.byName(value).then((response: any) => {\n                setSuggestions(response);\n            });\n        }\n    };\n\n    return (\n        <Autosuggest\n            data-cy={\"city-search-input\"}\n            ref={(autosuggest: any) =>\n                autosuggest &&\n                Animations.typing({\n                    element: autosuggest.input,\n                    wordsArray: animatedPlaceholderWords,\n                    defaultPlaceholder: placeholder,\n                    addListener: true\n                })\n            }\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={updateSuggestions}\n            onSuggestionsClearRequested={() => setSuggestions([])}\n            getSuggestionValue={(suggestion: any) => suggestion.name}\n            renderSuggestion={renderSuggestion}\n            onSuggestionSelected={onSelect}\n            inputProps={{\n                placeholder: placeholder,\n                value,\n                onChange: (e, inputData: any) => {\n                    setValue(inputData.newValue || '');\n                },\n            }}\n        />\n    );\n};\n","import { ActionCreatorWithPayload, createAction } from '@reduxjs/toolkit';\nimport { City } from '../../models/City';\n\nexport interface IAddCityPayload {\n    city: City;\n}\n\nexport interface IRemoveCityPayload {\n    cityId: string;\n}\n\nexport interface IUpdateOnePayload {\n    cityId: string;\n    update: any;\n}\n\nconst add: ActionCreatorWithPayload<IAddCityPayload> = createAction('CITIES::ADD');\nconst remove: ActionCreatorWithPayload<IRemoveCityPayload> = createAction('CITIES::REMOVE');\nconst updateOne: ActionCreatorWithPayload<IUpdateOnePayload> = createAction('CITIES::UPDATE_ONE');\n\nexport const citiesActions = {\n    add,\n    remove,\n    updateOne,\n};\n","import { createReducer, PayloadAction, Reducer } from '@reduxjs/toolkit';\nimport {citiesActions, IAddCityPayload, IRemoveCityPayload, IUpdateOnePayload} from './cities.actions';\nimport { ICityCoordinates } from '../../models/City';\n\nexport interface ICitiesReduxState {\n    [id: string]: {\n        id: string;\n        name: string;\n        coordinates: ICityCoordinates;\n        startDate: string;\n        endDate: string;\n        color: string;\n    };\n}\n\nconst initialState: ICitiesReduxState = {};\n\nexport const citiesReducer: Reducer<ICitiesReduxState> = createReducer(initialState, {\n    [citiesActions.add.type]: (state: ICitiesReduxState, action: PayloadAction<IAddCityPayload>) => {\n        const { city } = action.payload;\n\n        state[city.id] = city.normalize();\n\n        return state;\n    },\n    [citiesActions.remove.type]: (state: ICitiesReduxState, action: PayloadAction<IRemoveCityPayload>) => {\n        const { cityId } = action.payload;\n        delete state[cityId];\n\n        return state;\n    },\n    [citiesActions.updateOne.type]: (state, action: PayloadAction<IUpdateOnePayload>) => {\n        const { cityId, update } = action.payload;\n        if (state[cityId]) {\n            state[cityId] = {\n                ...state[cityId],\n                ...update,\n            };\n\n            console.log('updated city', state[cityId]);\n        }\n\n        return state;\n    },\n});\n","import { ActionCreatorWithPayload, createAction } from '@reduxjs/toolkit';\n\nexport interface ISetActiveCityIdPayload {\n    cityId: string;\n}\n\nconst setActiveCity: ActionCreatorWithPayload<ISetActiveCityIdPayload> = createAction('USER::SET_ACTIVE_CITY');\n\nexport const userActions = {\n    setActiveCity,\n};\n","import { createReducer, PayloadAction, Reducer } from '@reduxjs/toolkit';\nimport { ISetActiveCityIdPayload, userActions } from './user.actions';\n\nexport interface IUserReduxState {\n    activeCityId: string | null;\n    activeTripId: string | null;\n}\n\nconst initialState: IUserReduxState = {\n    activeCityId: null,\n    activeTripId: null,\n};\n\nexport const userReducer: Reducer<IUserReduxState> = createReducer(initialState, {\n    [userActions.setActiveCity.type]: (state, action: PayloadAction<ISetActiveCityIdPayload>) => {\n        const { cityId } = action.payload;\n\n        state.activeCityId = cityId;\n\n        return state;\n    },\n});\n","import { ActionCreatorWithPayload, createAction } from '@reduxjs/toolkit';\nimport { IDirectionsPayload, IRemoveDirectionsPayload } from './directions.reducers';\n\nconst add: ActionCreatorWithPayload<IDirectionsPayload> = createAction('DIRECTIONS::ADD');\nconst remove: ActionCreatorWithPayload<IRemoveDirectionsPayload> = createAction('DIRECTIONS::REMOVE');\n\nexport const directionsActions = {\n    add,\n    remove,\n};\n","import { createReducer, PayloadAction, Reducer } from '@reduxjs/toolkit';\nimport { directionsActions } from './directions.actions';\n\nexport interface IDirectionsReduxState {\n    [id: string]: any;\n}\n\nexport interface IDirectionsPayload {\n    directions: any;\n}\n\nexport interface IRemoveDirectionsPayload {\n    directionsId: string;\n}\n\nconst initialState: IDirectionsReduxState = {};\n\nexport const directionsReducer: Reducer<IDirectionsReduxState> = createReducer(initialState, {\n    [directionsActions.add.type]: (state: IDirectionsReduxState, action: PayloadAction<IDirectionsPayload>) => {\n        const { directions } = action.payload;\n        console.log('DIRECTIONS!', directions);\n        state[directions.id] = directions;\n\n        return state;\n    },\n    [directionsActions.remove.type]: (state, action: PayloadAction<IRemoveDirectionsPayload>) => {\n        const { directionsId } = action.payload;\n\n        if (state[directionsId]) {\n            delete state[directionsId];\n        }\n\n        return state;\n    },\n});\n","import { combineReducers, configureStore, getDefaultMiddleware, Store } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { citiesReducer, ICitiesReduxState } from './cities/cities.reducers';\nimport { IUserReduxState, userReducer } from './user/user.reducers';\nimport { loadState, saveState } from './localStorage';\nimport { citiesActions } from './cities/cities.actions';\nimport { directionsReducer, IDirectionsReduxState } from './directions/directions.reducers';\nimport { userActions } from './user/user.actions';\n\nexport interface IReduxState {\n    cities: ICitiesReduxState;\n    user: IUserReduxState;\n    directions: IDirectionsReduxState;\n}\n\nconst rootReducer = combineReducers({\n    cities: citiesReducer,\n    user: userReducer,\n    directions: directionsReducer,\n});\n\nconst defaultMiddleWares = getDefaultMiddleware({\n    serializableCheck: {\n        ignoredActions: [citiesActions.add.type, userActions.setActiveCity.type, citiesActions.updateOne.type],\n    },\n});\n\nconst middleware = [...defaultMiddleWares];\n\nif (process.env.NODE_ENV !== 'production') {\n    middleware.push(logger);\n}\nconst persistedState = loadState();\n\nexport const GlobalStore: Store<IReduxState> = configureStore({\n    reducer: rootReducer,\n    middleware: middleware,\n    preloadedState: persistedState,\n});\n\nGlobalStore.subscribe(() => {\n    saveState(GlobalStore.getState());\n});\n","import { IReduxState } from './GlobalStore';\n\nexport const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('bontrip-user');\n        if (serializedState === null) {\n            return;\n        }\n\n        return JSON.parse(serializedState);\n    } catch (err) {\n        console.error('There was an error loading the state.');\n    }\n};\n\nexport const saveState = (state: IReduxState) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('bontrip-user', serializedState);\n    } catch {\n        console.error('There was an error saving the state.');\n    }\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { IReduxState } from '../GlobalStore';\nimport { City } from '../../models/City';\nimport { getUserState } from '../user/user.selectors';\nimport moment from 'moment';\nimport { ICitiesReduxState } from './cities.reducers';\n\nexport const getCitiesState = (state: IReduxState) => state.cities;\n\nexport const getCities = createSelector([getCitiesState], (cities: ICitiesReduxState) => {\n    return (\n        Object.keys(cities) &&\n        Object.keys(cities)\n            .map((cityId) => {\n                const formattedCity = new City(cities[cityId]);\n                return formattedCity;\n            })\n            .sort((a, b) => (a.startDate && moment(a.startDate).isBefore(moment(b.startDate)) ? -1 : 1))\n    );\n});\n\nexport const getCitiesCoordinatesArray = createSelector([getCities], (cities: City[]) => {\n    return cities.map((city: any) => city.getCoordinatesArray());\n});\n\nexport const getActiveCity = createSelector([getCities, getUserState], (cities, user) => {\n    return cities.find((city) => city.id === user.activeCityId) || cities[0];\n});\n\nexport const getCityColors = createSelector(\n    // getUnderlyingAppUrl is used to re-trigger page segmentation!\n    [getCities],\n    (cities) => {\n        return cities.map((city) => city.color);\n    },\n);\n\nexport const createGetCities = () => getCities;\nexport const createGetActiveCity = () => getActiveCity;\nexport const createGetCityColors = () => getCityColors;\nexport const createGetCitiesCoordinatesArray = () => getCitiesCoordinatesArray;\n","import { IReduxState } from '../GlobalStore';\n\nexport const getUserState = (state: IReduxState) => state.user;\n","import Promise from 'promise';\nimport axios from 'axios';\n\nexport class DirectionsService {\n    public static get(points: any, method: string) {\n        return new Promise((resolve, reject) => {\n            const parsedPointString = this.getParsedPointString(points);\n\n            axios\n                .get(`https://api.mapbox.com/directions/v5/mapbox/${method}/${parsedPointString}?geometries=geojson&access_token=${process.env.REACT_APP_BONTRIP_MAP_KEY}`)\n                .then(function (response) {\n                    if (response.data && response.status === 200) {\n                        resolve(response.data);\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error in catch');\n                    reject(error);\n                });\n        });\n    }\n\n    private static getParsedPointString(points: any) {\n        let parsedPointString = '';\n\n        points.forEach((point: any, i: number) => {\n            parsedPointString = parsedPointString.concat(parsedPointString, `${point[0].toString()},`, `${point[1].toString()};`);\n\n            if (points.length - 1 === i) {\n                parsedPointString = parsedPointString.substring(0, parsedPointString.length - 1);\n            }\n        });\n\n        return parsedPointString;\n    }\n}\n","import { createSelector } from '@reduxjs/toolkit';\nimport { IReduxState } from '../GlobalStore';\nimport { IDirectionsReduxState } from './directions.reducers';\n\nexport const getDirectionsState = (state: IReduxState) => state.directions;\n\nexport const getDirections = createSelector([getDirectionsState], (directions: IDirectionsReduxState) => {\n    return (\n        Object.keys(directions) &&\n        Object.keys(directions).map((directionsId) => {\n            return directions[directionsId].routes[0];\n        })\n    );\n});\n\nexport const createGetDirections = () => getDirections;\n","import {GlobalStore, IReduxState} from '../GlobalStore';\nimport { createGetCities } from './cities.selectors';\nimport { City } from '../../models/City';\nimport { citiesActions } from './cities.actions';\nimport { userActions } from '../user/user.actions';\nimport { DirectionsService } from '../../services/DirectionsService';\nimport { directionsActions } from '../directions/directions.actions';\nimport { Dispatch } from 'redux';\nimport * as moment from 'moment';\nimport {createGetDirections} from \"../directions/directions.selectors\";\n\nconst saveCity = (city: any) => {\n    return (dispatch: Dispatch, getState: () => IReduxState) => {\n        const savedCities: City[] = createGetCities()(getState());\n        const isCityAlreadyAdded = savedCities.length > 0 && savedCities.find((savedCity: City) => savedCity.name === city.name);\n        const lastCity: City = savedCities[savedCities.length - 1];\n        const startDate = city.startDate ? new Date(city.startDate) : lastCity ? new Date(lastCity.endDate) : new Date();\n        const endDate = city.endDate ? new Date(city.endDate) : new Date(new Date().setDate(startDate.getDate() + 1));\n        console.log('city', city);\n        const formattedCity = new City({\n            ...city,\n            startDate,\n            endDate,\n        });\n\n        const index: number = savedCities.length > 0 ? savedCities.length - 1 : 0;\n        formattedCity.generateColor(index);\n\n        if (!isCityAlreadyAdded) {\n            dispatch(citiesActions.add({ city: formattedCity }));\n            dispatch(userActions.setActiveCity({ cityId: formattedCity.id }));\n\n            if (savedCities.length > 0) {\n                dispatch(updateDirections(formattedCity) as any);\n            }\n        }\n    };\n};\n\nconst updateDirections = (city: City) => {\n    return (dispatch: Dispatch, getState: () => IReduxState) => {\n        const savedCities = createGetCities()(getState());\n        const cityIndex = savedCities.findIndex((savedCity) => savedCity.id === city.id);\n        const previousCityCoordinates = savedCities[cityIndex - 1] && savedCities[cityIndex - 1].getCoordinatesArray();\n        dispatch(directionsActions.remove({ directionsId: city.id }));\n\n        if (previousCityCoordinates) {\n            DirectionsService.get([previousCityCoordinates, city.getCoordinatesArray()], 'driving').then((response: any) => {\n                const directions = {\n                    id: city.id,\n                    ...response,\n                };\n\n                dispatch(\n                    citiesActions.updateOne({\n                        cityId: city.id,\n                        update: {\n                            distance: `${(response.routes[0].distance / 1000).toFixed(2)} km`,\n                            duration: `${moment.utc(response.routes[0].duration * 1000).format('HH:mm')} h`,\n                        },\n                    }),\n                );\n\n                dispatch(directionsActions.add({ directions: directions }));\n            });\n        } else {\n            dispatch(\n                citiesActions.updateOne({\n                    cityId: city.id,\n                    update: {\n                        distance: null,\n                        duration: null,\n                    },\n                }),\n            );\n        }\n    };\n};\n\nconst rescheduleCity = (cityId: string, startDate: Date, endDate: Date) => {\n    return (dispatch: Dispatch, getState: () => IReduxState) => {\n        const savedCitiesBefore = createGetCities()(getState());\n        console.log('savedCitiesBefore', savedCitiesBefore)\n        dispatch(\n            citiesActions.updateOne({\n                cityId,\n                update: {\n                    startDate,\n                    endDate,\n                },\n            }),\n        );\n\n        const savedCitiesAfter = createGetCities()(getState());\n        console.log('savedCitiesAfter', savedCitiesAfter)\n\n        if (savedCitiesAfter.length > 1) {\n            savedCitiesAfter.forEach((city: City, i: number) => {\n                const isFirstOrLast = i == 0 && i !== savedCitiesAfter.length - 1;\n                const shouldUpdate = isFirstOrLast ?\n                    savedCitiesBefore[i + 1].id !== savedCitiesAfter[i + 1].id :\n                    savedCitiesBefore[i - 1].id !== savedCitiesAfter[i - 1].id;\n                if (shouldUpdate) {\n                    dispatch(updateDirections(city) as any);\n                }\n            });\n        }\n    };\n};\n\nconst removeCity = (cityId: string) => {\n    return (dispatch: Dispatch, getState: () => IReduxState) => {\n        dispatch(citiesActions.remove({ cityId }));\n        dispatch(directionsActions.remove({ directionsId: cityId }));\n\n        const state = getState();\n        const cities = createGetCities()(state);\n\n        if (cities.length < 2) {\n            const directions = createGetDirections()(state) || [];\n            Object.keys(directions).forEach((cityId) => {\n                dispatch(directionsActions.remove({ directionsId: cityId }));\n            })\n\n        }\n    }\n}\n\nexport const citiesThunks = {\n    saveCity,\n    removeCity,\n    rescheduleCity,\n};\n","import { browserHistory } from 'react-router';\n\nexport class Navigation {\n    public static goTo(location: string) {\n        browserHistory.push(location);\n    }\n}\n","import * as React from 'react';\nimport { Header } from '../../components/Header/Header';\nimport { Slideshow } from '../../components/Slideshow/Slideshow';\nimport {CityAutocomplete} from '../../components/CityAutocomplete/CityAutocomplete';\nimport { injectIntl } from 'react-intl'\nimport {IHomeProps} from \"./Home.I\";\nimport {FormEvent} from \"react\";\nimport {GlobalStore} from \"../../redux/GlobalStore\";\nimport {citiesThunks} from \"../../redux/cities/cities.thunks\";\nimport {Navigation} from \"../../helpers/Navigation\";\n\nconst images = require('../../slideshow.json');\n\nexport const Home: React.FC<IHomeProps> = (props) => {\n    const placeholder = props.intl.messages.placeholders.city_autocomplete;\n    const placeholders = props.intl.messages.placeholders.city_array;\n\n    const onSelect = (event: FormEvent, data: any) => {\n        GlobalStore.dispatch(citiesThunks.saveCity(data.suggestion) as any);\n        Navigation.goTo('/newtrip');\n    };\n\n    return (\n        <div className=\"cover-page-layout\">\n            <Header isTransparent={true} />\n            <Slideshow isFullscreen={true} images={images.home} />\n            <div className=\"l-page-overlay\">\n                <CityAutocomplete\n                    animatedPlaceholderWords={placeholders}\n                    placeholder={placeholder}\n                    onSelect={onSelect}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default injectIntl(Home);\n","import * as React from 'react';\nimport ReactMapboxGl, { ZoomControl, Marker, Layer, Source } from 'react-mapbox-gl';\nimport SVG from 'react-inlinesvg';\nimport { IMapProps } from './Map.I';\nimport { GlobalStore } from '../../redux/GlobalStore';\nimport { citiesThunks } from '../../redux/cities/cities.thunks';\nimport { CityService } from '../../services/CityService';\n\nconst Map = ReactMapboxGl({\n    accessToken: process.env.REACT_APP_BONTRIP_MAP_KEY || '',\n});\n\nexport const MapWrapper: React.FC<IMapProps> = (props) => {\n    const { markersData, location, directions } = props;\n    const setMarker = (map: any, event: any) => {\n        const { lng, lat } = event.lngLat;\n\n        CityService.byCoordinates(lng, lat).then((city) => {\n            GlobalStore.dispatch(citiesThunks.saveCity(city) as any);\n        });\n    };\n\n    const renderMarkers = () => {\n        return markersData.map((markerInfo: any, i: number) => (\n            <Marker coordinates={[markerInfo.coordinates.lat, markerInfo.coordinates.lng]} key={`marker-${i}`} onClick={() => alert(markerInfo.color)} anchor={'bottom'} offset={[0, 0]}>\n                <div style={{ color: markerInfo.color }} key={`marker-wrapper-${i}`}>\n                    <SVG key={`marker-icon-${i}`} id=\"map-marker\" src=\"/images/marker.svg\" preProcessor={(code) => code.replace(/fill=\".*?\"/g, `fill=\"currentColor\"`)} />\n                </div>\n            </Marker>\n        ));\n    };\n\n    const renderDirections = () => {\n        return directions.map((directionsInfo: any, i: number) => {\n            return (\n                <React.Fragment>\n                    <Source\n                        key={`route-source${i}`}\n                        id={`directions-source-${i}`}\n                        tileJsonSource={{\n                            type: 'geojson',\n                            data: {\n                                type: 'Feature',\n                                properties: {},\n                                geometry: {\n                                    type: 'LineString',\n                                    coordinates: directionsInfo.geometry.coordinates,\n                                },\n                            },\n                        }}\n                    />\n                    <Layer\n                        sourceId={`directions-source-${i}`}\n                        key={`route-layer${i}`}\n                        type={'line'}\n                        paint={{\n                            'line-color': '#2144b7',\n                            'line-width': 3,\n                            'line-opacity': 1,\n                        }}\n                        layout={{\n                            'line-join': 'round',\n                            'line-cap': 'round',\n                        }}\n                    ></Layer>\n                </React.Fragment>\n            );\n        });\n    };\n\n    return (\n        <Map\n            style=\"mapbox://styles/mapbox/streets-v9\"\n            containerStyle={{\n                height: '100vh',\n                width: '100vw',\n            }}\n            onClick={(map, event) => setMarker(map, event)}\n            center={location}\n        >\n            {renderDirections()}\n            {renderMarkers()}\n            <ZoomControl position={'bottom-right'} />\n        </Map>\n    );\n};\n","import * as React from 'react';\nimport { ISidepanelProps } from './Sidepanel.I';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const Sidepanel: React.FC<ISidepanelProps> = (props) => {\n    const { image, orientation, index, color, children } = props;\n    const [isOpen, togglePanel] = useState(false);\n\n    const panelClasses = classNames({\n        'sidepanel': true,\n        'sidepanel-open': isOpen,\n        'sidepanel-left': orientation === 'left',\n        'sidepanel-right': orientation === 'right',\n    });\n\n    return (\n        <div className={panelClasses} style={{ backgroundColor: color }}>\n            <div className=\"sidepanel-content\">{children}</div>\n            <div className=\"sidepanel-tab\" onClick={() => togglePanel(!isOpen)} style={{ top: `${index * 70}px`, backgroundColor: color }}>\n                <img className=\"sidepanel-tab-image\" src={image} />\n            </div>\n        </div>\n    );\n};\n","import { SyntheticEvent } from 'react';\n\nexport const ItemTypes = {\n    CARD: 'card',\n};\n\nexport interface ICityDraggableCardProps {\n    key: string;\n    id: string;\n    index: number;\n    text: string;\n    footerText?: string;\n    clickCard: (event: SyntheticEvent) => void;\n    indicatorColor: string;\n    subtitle?: string;\n    classNames: string;\n    moveCard: (dragIndex: number, hoverIndex: number) => void;\n    isDragging: boolean;\n    connectDragSource: any;\n    connectDropTarget: any;\n    onRemove: (id: string) => void;\n}\n","import React, { useImperativeHandle, useRef } from 'react';\nimport { ConnectDropTarget, ConnectDragSource, DropTargetMonitor, DragSourceMonitor } from 'react-dnd';\nimport { DragSource, DropTarget, DropTargetConnector, DragSourceConnector } from 'react-dnd';\nimport { ICityDraggableCardProps, ItemTypes } from './CityDraggableCard.I';\nimport { XYCoord } from 'dnd-core';\nimport SVG from 'react-inlinesvg';\n\ninterface CardInstance {\n    getNode(): HTMLDivElement | null;\n}\n\nconst CityDraggableCard = React.forwardRef<HTMLDivElement, ICityDraggableCardProps>(({ id, text, subtitle, footerText, indicatorColor, classNames, isDragging, connectDragSource, connectDropTarget, onRemove }, ref) => {\n    const elementRef = useRef(null);\n    connectDragSource(elementRef);\n    connectDropTarget(elementRef);\n\n    const opacity = isDragging ? 0 : 1;\n    useImperativeHandle<any, CardInstance>(ref, () => ({\n        getNode: () => elementRef.current,\n    }));\n    return (\n        <div ref={elementRef} className={`draggable-card ${classNames}`} style={{ opacity }}>\n            <SVG key={`remove-icon-${id}`} width=\"14\" height=\"14\" onClick={() => onRemove(id)} className=\"draggable-card__remove-icon\" src=\"/images/close.svg\" />\n            <span className=\"draggable-card__content\"><div className=\"draggable-card__indicator\" style={{ backgroundColor: indicatorColor }}></div><span>{text}</span></span>\n            <span className=\"draggable-card__subtitle\">{subtitle}</span>\n            <span className=\"draggable-card__handle\"></span>\n        </div>\n    );\n});\n\nexport default DropTarget(\n    ItemTypes.CARD,\n    {\n        hover(props: ICityDraggableCardProps, monitor: any, component: CardInstance) {\n            if (!component) {\n                return null;\n            }\n            // node = HTML Div element from imperative API\n            const node = component.getNode();\n            if (!node) {\n                return null;\n            }\n\n            const dragIndex = monitor.getItem().index;\n            const hoverIndex = props.index;\n\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return;\n            }\n\n            // Determine rectangle on screen\n            const hoverBoundingRect = node.getBoundingClientRect();\n\n            // Get vertical middle\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset();\n\n            // Get pixels to the top\n            const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n            // Only perform the move when the mouse has crossed half of the items height\n            // When dragging downwards, only move when the cursor is below 50%\n            // When dragging upwards, only move when the cursor is above 50%\n\n            // Dragging downwards\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return;\n            }\n\n            // Dragging upwards\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return;\n            }\n\n            // Time to actually perform the action\n            props.moveCard(dragIndex, hoverIndex);\n\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            monitor.getItem().index = hoverIndex;\n        },\n    },\n    (connect: any) => ({\n        connectDropTarget: connect.dropTarget(),\n    }),\n)(\n    DragSource(\n        ItemTypes.CARD,\n        {\n            beginDrag: (props: ICityDraggableCardProps) => ({\n                id: props.id,\n                index: props.index,\n            }),\n        },\n        (connect: any, monitor: any) => ({\n            connectDragSource: connect.dragSource(),\n            isDragging: monitor.isDragging(),\n        }),\n    )(CityDraggableCard),\n);\n","import React from 'react';\nimport CityDraggableCard from '../CityDraggableCard/CityDraggableCard';\nimport moment from 'moment';\nimport { ICityDraggableCard, ICityDraggableCardsListProps } from './CityDraggableCardsList.I';\nimport { DragDropContext } from 'react-dnd';\n\nconst CityDraggableCardsList: React.FC<ICityDraggableCardsListProps> = (props) => {\n    const { cards, moveCard, clickCard, removeCard } = props;\n\n    return (\n        <div>\n            {cards.map((card: ICityDraggableCard, i: number) => (\n                <CityDraggableCard\n                    key={card.name}\n                    indicatorColor={card.color}\n                    index={i}\n                    id={card.id}\n                    text={card.name}\n                    subtitle={card.startDate && card.endDate ? `${moment(card.endDate).diff(moment(card.startDate), 'days') + 1} day(s)` : '0 days'}\n                    moveCard={moveCard}\n                    clickCard={() => clickCard(card.id)}\n                    class={'draggable-card'}\n                    onRemove={removeCard}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default CityDraggableCardsList;\n","import * as React from 'react';\nimport { DateRangePicker } from 'react-date-range';\nimport { GlobalStore } from '../../redux/GlobalStore';\nimport { userActions } from '../../redux/user/user.actions';\nimport { ICityDatesFormProps } from './CityDatesForm.I';\nimport { City } from '../../models/City';\nimport { citiesThunks } from '../../redux/cities/cities.thunks';\nimport CityDraggableCardsList from '../CityDraggableCardsList/CityDraggableCardsList';\nimport {useEffect, useState} from \"react\";\n\nconst today = new Date();\n\nexport const CityDatesForm: React.FC<ICityDatesFormProps> = (props) => {\n    const [ranges, setRanges] = useState([]);\n    const [activeRange, setActiveRange] = useState([0,0]);\n    const { colors, cities, activeCityId, title } = props;\n\n    useEffect(() => {\n        createCityDateRanges();\n    }, [cities]);\n\n    useEffect(() => {\n        const currentActiveCityIndex = getCurrentActiveCityIndex();\n        setActiveRange([currentActiveCityIndex, currentActiveCityIndex])\n    }, [activeCityId]);\n\n    const handleRangeChange = (range: any) => {\n        const getRange: any = Object.values(range) && Object.values(range).length > 0 && Object.values(range)[0];\n        const { key, startDate, endDate } = getRange;\n        GlobalStore.dispatch(citiesThunks.rescheduleCity(key, new Date(startDate), new Date(endDate)) as any);\n    }\n\n    const createCityDateRanges = () => {\n        const ranges: any = cities.map((city, i) => {\n            const lastCity = cities[i - 1];\n\n            if (city) {\n                const startDate = city.startDate ? new Date(city.startDate) : lastCity ? new Date(lastCity.endDate) : today;\n                const endDate = city.endDate ? new Date(city.endDate) : new Date(new Date().setDate(startDate.getDate() + 1));\n                return {\n                    startDate,\n                    endDate,\n                    key: city.id,\n                };\n            }\n        });\n\n        setRanges(ranges);\n    };\n\n    const getCurrentActiveCityIndex = () => cities.findIndex((city) => city && city.id === activeCityId);\n\n    const handleFocusChange = () => {\n        const currentActiveCityIndex = getCurrentActiveCityIndex();\n        const nextActiveCity: City = currentActiveCityIndex !== cities.length - 1 ? cities[currentActiveCityIndex + 1] : cities[0];\n\n        GlobalStore.dispatch(userActions.setActiveCity({ cityId: nextActiveCity.id }));\n    };\n\n    const clickCard = (cityId: string) => GlobalStore.dispatch(userActions.setActiveCity({ cityId }));\n    const removeCard = (cityId: string) => GlobalStore.dispatch(citiesThunks.removeCity(cityId) as any);\n\n    return (\n        <React.Fragment>\n            <div>\n                <p>Select dates:</p>\n                <DateRangePicker\n                    rangeColors={colors}\n                    focusedRange={activeRange}\n                    initialFocusedRange={activeRange}\n                    ranges={ranges}\n                    onChange={(range: any) => handleRangeChange(range)}\n                    scroll={{ enabled: true }}\n                    direction=\"vertical\"\n                    months={1}\n                    moveRangeOnFirstSelection={false}\n                    onRangeFocusChange={handleFocusChange}\n                />\n                <CityDraggableCardsList cards={cities} removeCard={removeCard} title={title} clickCard={(cityId: string) => clickCard(cityId)} />\n            </div>\n        </React.Fragment>\n    );\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { MapWrapper } from '../../components/Map/Map';\nimport { Sidepanel } from '../../components/Sidepanel/Sidepanel';\nimport { Header } from '../../components/Header/Header';\nimport { CityDatesForm } from '../../components/CityDatesForm/CityDatesForm';\nimport { createGetActiveCity, createGetCities, createGetCityColors } from '../../redux/cities/cities.selectors';\nimport { createGetDirections } from '../../redux/directions/directions.selectors';\nimport { IReduxState } from '../../redux/GlobalStore';\nimport { IAddCitiesProps } from './AddCities.I';\nimport { injectIntl } from 'react-intl'\n\nexport const AddCities: React.FC<IAddCitiesProps> = (props) => {\n    const { selectedCities, activeCity, cityColors, directions } = props;\n    const cityDatesFormTitle = props.intl.messages.forms.city_dates_form_title;\n    const initialLocation = activeCity ? [activeCity.coordinates.lat, activeCity.coordinates.lng] : [-73.935242, 40.730610];\n    return (\n        <div>\n            <Header hasNavigation={false} isTransparent={false} />\n            <Sidepanel index={1} image={'/images/map.png'} orientation=\"left\">\n                <CityDatesForm title={cityDatesFormTitle} colors={cityColors} cities={selectedCities} activeCityId={activeCity ? activeCity.id : ''} />\n            </Sidepanel>\n            <MapWrapper directions={directions} isLoaded={false} location={initialLocation} markersData={selectedCities} />\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IReduxState) => {\n    const selectedCities = createGetCities();\n    const activeCity = createGetActiveCity();\n    const cityColors = createGetCityColors();\n    const directions = createGetDirections();\n\n    return {\n        selectedCities: selectedCities(state),\n        activeCity: activeCity(state),\n        cityColors: cityColors(state),\n        directions: directions(state),\n    };\n};\n\nexport default injectIntl(connect(mapStateToProps)(AddCities));\n","import axios from \"axios\";\nimport {RegisterState} from \"../containers/Register/Register.I\";\n\nexport class AuthService {\n    public static register(user: RegisterState) {\n        return axios.post(`${process.env.REACT_API_URL}users`, user);\n    }\n}\n","import * as React from 'react';\nimport { Header } from '../../components/Header/Header';\nimport { injectIntl } from 'react-intl'\nimport {RegisterProps, RegisterState} from \"./Register.I\";\nimport {AuthService} from \"../../services/AuthService\";\nimport {ChangeEvent, useState} from \"react\";\n\nconst RegisterComponent: React.FC<RegisterProps> = (props: RegisterProps) => {\n    const title = props.intl.messages.pages.signup.title;\n    const [user, setUser] = useState<RegisterState>({\n        email: '',\n        password: '',\n        confirm_password: ''\n    });\n    const registerUser = () => {\n        AuthService.register(user).then((response) => {\n            console.log(response)\n\n        }).catch(() =>  {\n            console.log('catch')\n        });\n    };\n\n    const updateForm = (e: ChangeEvent) => {\n        if (!e.target) return;\n        const inputName = (e.target as HTMLInputElement).name;\n\n        setUser({\n            ...user,\n            [inputName]: (e.target as HTMLInputElement).value\n        })\n    };\n\n    return (\n        <div className=\"cover-page-layout\">\n            <Header isTransparent={false} />\n            <div className=\"page page__center-vertical\">\n                <form className={\"centered-block centered-block__med centered-block__with-background\"}>\n                    <h2 className={\"centered-block__title\"}>{title}</h2>\n                    <input name=\"email\" onChange={updateForm} value={user.email} type={\"text\"} placeholder={props.intl.messages.placeholders.contact.email}/>\n                    <input name=\"password\" onChange={updateForm} type={\"password\"} value={user.password} placeholder={props.intl.messages.placeholders.contact.password}/>\n                    <input name=\"confirm_password\" onChange={updateForm} type={\"password\"} value={user.confirm_password} placeholder={props.intl.messages.placeholders.contact.confirm_password}/>\n                    <button className={\"button\"} onClick={registerUser}>{props.intl.messages.forms.submit}</button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport const Register = injectIntl(RegisterComponent);\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { Route, Router, browserHistory } from 'react-router';\nimport { Provider } from 'react-redux';\nimport Home from './containers/Home/Home';\nimport AddCities from './containers/AddCities/AddCities';\nimport { GlobalStore } from './redux/GlobalStore';\nimport './style/app.scss';\nimport * as moment from 'moment';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport {IntlProvider} from \"react-intl\";\nimport messages_es from \"./translations/es.json\";\nimport messages_en from \"./translations/en.json\";\nimport {Register} from \"./containers/Register/Register\";\n\nconst messages: any = {\n    'es': messages_es,\n    'en': messages_en\n};\nconst language = navigator.language.split(/[-_]/)[0];\n\n// Set default format\n(moment as any).defaultFormat = 'YYYY/MM/DD';\n\nconst App = () => {\n    return (\n        <IntlProvider locale={language} defaultLocale={'en'} messages={messages[language]}>\n            <DndProvider backend={HTML5Backend}>\n                <Provider store={GlobalStore}>\n                    <Router history={browserHistory}>\n                        <Route path=\"/\" component={Home} />\n                        <Route path=\"/register\" component={Register} />\n                        <Route path=\"/newtrip\" component={AddCities} />\n                    </Router>\n                </Provider>\n            </DndProvider>\n        </IntlProvider>\n    );\n};\n\nconst root = document.getElementById('app');\nrender(<App />, root);\n"],"sourceRoot":""}